Starting weekly assessment for Petra, Week5

Current Marks = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 61.32 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, .idea, Assessment, Week5, Week2, CMEEMainProject, Week4, .git, Week3

Found the following files in parent directory: .gitignore, README

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README

Printing contents of README:
**********************************************************************


Week 5.
Mapping.

Went through a practical then decided to try mapping the locations of the woodlands that I am studying for my project.
These were in eastings and northings, and despite following proceedures in QGIS tutorials from various websites, I struggled to get these mapped and projected. I could map them on their own, but I couldnt tie them up with a proper UK map.

Next I decided to try mapping in R, but I couldnt download "gdal" and other libraries that were required.

Next I tried mapping in python - similar story.

The R packages would not work with 3.8.3, they wanted older versions. The python packages had many dependencies that needed to be downloaded from github, and I wasnt sure I was setting up the paths correctly etc. This prompted me to look at my pythin libraries and directory structure and realise that it seems to be a bit mangled.

After 3 days of mapping I had achieved nothing! 

Found/adapted slightly a program to change eastings and northings to OS grid refs



**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week5 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK5...

Found the following directories: Code, Data

Found the following files: 

Checking for readme file in weekly directory...

README file missing, 1 pt deducted

Current Marks = 99

Results directory missing!

Found 4 code files: Area_Site.R, matplotlib_box.py, plotting2.py, GridRefConverter.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file Area_Site.R...

File contents are:
**********************************************************************
#Week 5, QGSI - I am using ggmap!Datacamp.
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy ist November 2017

library(ggmap)
library(ggplot2)
Area_Site = read.csv("../Data/Area_Site.csv")
corvallis =  c(lon = -123.260, lats = 44.5646) #specify a location
map_5 = get_map(location = corvallis,zoom=10, scale =1) # get the map, needs location, zoom

ggmap(map_5) #ggmap plots the map

corvallis_map = get_map(location = corvallis, zoom = 13, scale = 1)

ggmap(corvallis_map)

# add something on top of a map. Data will need a mapping. Lets get Uk map and add areas and sites of Woodland Survey
mapImageData3 <- get_map(location = c(lon = -0.016179, lat = 51.538525),
                         color = "color",
                         source = "google",
                         maptype = "roadmap",
                         zoom = 7)
ggmap(mapImageData3)

#create a map of the woodlands

ggmap(mapImageData3)

#need to convert data from eastings and northings

library(rgdal) # rgdal is not available for newer R Studio, therefore spTransform wont work
#I think this might make the whole mapping thing a bit tricky. I gues the data could be loaded
#into qgis and transfomred, but does that take away the whole point of doing it in R?

ggmap(mapImageData3)+
geom_point(aes(Easting,Northing), data = Area_Site)
Area_Site$Easting  <- spTransform(Area_Site$Site, CRS("+proj=longlat +ellps=GRS80"))
**********************************************************************

Testing Area_Site.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in library(ggmap) : there is no package called ‘ggmap’
Execution halted

======================================================================
Inspecting script file matplotlib_box.py...

File contents are:
**********************************************************************
#!usr/bin/python

"""Creating box plots in matplot lib"""

__author__ = "Petra Guy, pg5117@ic.ac.uk"
__version__ = "2.7"

from sklearn import datasets
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np


# use the iris data
iris = datasets.load_iris()

# create the canvas, like ggplot
fig = Figure(figsize=(8, 6))
FigureCanvas(fig)

# create one subplot
# a 3-digit integer or three separate integers describing the position of the subplot.
# If the three integers are I, J, and K, the subplot is the Ith plot on a grid with J rows and K columns.
# returns: The axes of the subplot.
ax = fig.add_subplot(111)

# create boxplot
ax.boxplot(iris.data)

# label & size etc
ax.set_xticklabels(iris.feature_names)
ax.set_ylabel('cm')
ax.grid(False)

# save it to working directory
fig.savefig('test_boxplot_oo')

# can't show it without using pyplot
# fig.show()**********************************************************************

Testing matplotlib_box.py...

matplotlib_box.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.50027s

======================================================================
Inspecting script file plotting2.py...

File contents are:
**********************************************************************
#!usr/bin/python

"""Practising with matplot.lib"""

__author__ = "Petra Guy, pg5117@ic.ac.uk"
__version__ = "2.7"

import matplotlib.pyplot as plt
import pandas as pd
import pylab


df = pd.read_csv("../../Week3/Data/KeyWest.CSV")
print(df)
plt.plot(df['Year'],df['Temp'])
plt.show()
**********************************************************************

Testing plotting2.py...

plotting2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
    Unnamed: 0  Year       Temp
0            1  1901  23.750000
1            2  1902  24.666667
2            3  1903  24.716667
3            4  1904  24.516667
4            5  1905  24.883333
5            6  1906  24.633333
6            7  1907  25.241667
7            8  1908  24.900000
8            9  1909  24.766667
9           10  1910  24.025000
10          11  1911  25.283333
11          12  1912  25.208333
12          13  1913  25.191667
13          14  1914  24.700000
14          15  1915 
**********************************************************************

Code ran without errors

Time consumed = 3.51795s

======================================================================
Inspecting script file GridRefConverter.py...

File contents are:
**********************************************************************
#!usr/bin/python

"""convert easting and northing to OS GRID"""

__author__ = "Petra Guy, pg5117@ic.ac.uk"
__version__ = "2.7"

import pandas as pd
import math


def getOSGridReference(e, n):

    # The characters for the start of grid ref
    gridChars = "ABCDEFGHJKLMNOPQRSTUVWXYZ"

    # get the 100km-grid indices, so need 6 figs, add 0s if required
    e100k = math.floor(e / 100000)
    n100k = math.floor(n / 100000)

    # translate those into numeric equivalents
    # of the grid letters
    l1 = (19 - n100k) - (19 - n100k) % 5 + math.floor((e100k + 10) / 5)
    l2 = (19 - n100k) * 5 % 25 + e100k % 5

    letPair = gridChars[int(l1)] + gridChars[int(l2)]

    # strip 100km-grid indices from easting & northing,
    # round to 100m
    e100m = math.trunc(round(float(e) / 100))
    egr = str(e100m).rjust(4, "0")[1:]
    if n >= 1000000:
        n = n - 1000000  # Fix Shetland northings
    n100m = math.trunc(round(float(n) / 100))
    ngr = str(n100m).rjust(4, "0")[1:]

    return letPair + egr + ngr


# test
assert getOSGridReference(96000, 906000) == 'NA960060'
assert getOSGridReference(465149, 1214051) == 'HP651141'

# import the file
woodLocs = pd.read_csv(r'../Data/Area_Site.csv')

# add easting and northings; *by100 to make 6 fig
woodLocs['Easting'] = woodLocs['Easting'] * 100
woodLocs['Northing'] = woodLocs['Northing'] * 100

woodLocsOS = woodLocs

# this is a bit like R apply
woodLocsOS['OS'] = woodLocsOS.apply(lambda x: getOSGridReference(x['Easting'], x['Northing']), axis=1)


print woodLocsOS.head()

**********************************************************************

Testing GridRefConverter.py...

GridRefConverter.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
   Site   Area  Easting  Northing        OS
0    49  18.67   188400    233800  SM884338
1    50  13.56   259500    582200  NX595822
2    51   9.42   218800    221500  SN188215
3    52  16.18   264800    240700  SN648407
4    53  13.35   350900    342000  SJ509420

**********************************************************************

Code ran without errors

Time consumed = 0.48104s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Marks for the Week = 99

NOTE THAT THESE ARE NOT THE FINAL MARKS FOR THE WEEK, BUT AN UPPER BOUND ON THE MARKS!