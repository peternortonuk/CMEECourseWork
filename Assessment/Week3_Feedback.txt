Starting weekly assessment for Petra, Week3

Current Marks = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 61.32 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, .idea, Assessment, Week5, Week2, CMEEMainProject, Week4, .git, Week3

Found the following files in parent directory: .gitignore, README

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README

Printing contents of README:
**********************************************************************


Week 5.
Mapping.

Went through a practical then decided to try mapping the locations of the woodlands that I am studying for my project.
These were in eastings and northings, and despite following proceedures in QGIS tutorials from various websites, I struggled to get these mapped and projected. I could map them on their own, but I couldnt tie them up with a proper UK map.

Next I decided to try mapping in R, but I couldnt download "gdal" and other libraries that were required.

Next I tried mapping in python - similar story.

The R packages would not work with 3.8.3, they wanted older versions. The python packages had many dependencies that needed to be downloaded from github, and I wasnt sure I was setting up the paths correctly etc. This prompted me to look at my pythin libraries and directory structure and realise that it seems to be a bit mangled.

After 3 days of mapping I had achieved nothing! 

Found/adapted slightly a program to change eastings and northings to OS grid refs



**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: .Rhistory, README

Checking for readme file in weekly directory...

Found README in parent directory, named: README

Printing contents of README:
**********************************************************************

Week 5.

**********************************************************************

Found 26 code files: browse.R, PP_Regress.R, Vectorize2.py, apply1.R, CompileLatex.sh, run_get_TreeHeight.sh, get_TreeHeight.py, Control.R, boilerplate.R, TreeHeight.R, PP_Lattice.R, next.R, Sample.R, Vectorize1.R, break.R, basic_io.R, Vectorize1.py, try.R, apply2.R, get_TreeHeight.R, TAutoCorr.R, Vectorize2.R, DataWrangTidy.R, DataWrang.R, PP_Regress.py, GPDD.R

Found the following extra files: Rplots.pdf, .Rhistory, .RData
0.5 pt deducted per extra file

Current Marks = 98.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file browse.R...

File contents are:
**********************************************************************
# 9.4.2 Debugging using browser

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 21th October 2017

Exponential <- function (N0 = 1, r =1, generations = 10){
  N <- rep(NA, generations)
  
  N[1] <-N0
  for (t in 2:generations) {
    N[t] <- N[t-1]*exp(r)
    browser()
    }
  return (N)
}

plot(Exponential(), type = "l", main = "Exponential growth")**********************************************************************

Testing browse.R...

Output (only first 500 characters): 

**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.17957s

======================================================================
Inspecting script file PP_Regress.R...

File contents are:
**********************************************************************
# Practical Chapter 9

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 27th October 2017

#The program reads in data with predator and prey masses, type of feeding, eg insectivorous, piscivororous, and predator life stage, eg, adult, larva etc. 
# The last two are in two columns of factors with 5 and 6 levels respectively. The task is to produce linear models FOR EACH predator lifestage, BY Feeding interaction.
# I.e., subset by Type.of.feeding.interaction. The subset this by Predator.lifestae. Then plot a linear model for each. Potentially 30, but not every lifestage is present in
#each feeding interaction

library(dplyr) # need for filter
library(ggplot2)
library(plyr) # need for count

rm(list = ls())

Mydf = as.data.frame(read.csv("../Data/EcolArchives-E089-51-D1.csv"))

#This plot needed for coursework. 
pdf("../Results/PP_Regress.pdf",  11.7, 8.3)
plot = ggplot(Mydf, aes(x = log(Prey.mass), y = log(Predator.mass) ) )+
  geom_point(aes(col = Predator.lifestage), shape = 3)+
  stat_smooth(method = "lm", aes(col = Predator.lifestage), fullrange = TRUE) +
  facet_grid(Type.of.feeding.interaction ~ .)
print(plot)
dev.off()

# convert to mg to g - a few of the data are in mg.
l = length(Mydf$Prey.mass)
for (i in 1:l){
  if (Mydf$Prey.mass.unit[i] == "mg") {
    Mydf$Prey.mass[i] = Mydf$Prey.mass[i] * 1e-3
  }
}

# take logs of the two mass columns which will be used in the linear model and makes later argument bit neater

logsPredMass = log(Mydf$Predator.mass)
Mydf[["Predator.mass"]] = logsPredMass
logsPreyMass = log(Mydf$Prey.mass)
Mydf[["Prey.mass"]] = logsPreyMass

# using dplyr is fine - but need to work out how to then specify what data I have ended up with in the model. Eg, need to pass the Feeding.interaction and Predator.lifestage
#info through as well. Didn't work that bit out.

#models = Mydf %>%  filter(Type.of.feeding.interaction == "insectivorous") %>%  group_by(Predator.lifestage) %>%  do(lm(log(Predator.mass) ~ log(Prey.mass)))
#means = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%   summarize(m = mean(Predator.mass)) #%>%  assign("bar", .)
#Modelspiped = Mydf %>% group_by(Type.of.feeding.interaction) %>% group_by(Predator.lifestage, add = TRUE) %>%  do(fits = lm(log(Predator.mass) ~ log(Prey.mass), data = . ))


#Start again using filters. Part of the issue is that I am trying to automate everything, as if I dont know what each grpup will throw out, so the 
#program generic. Difficulty is that I then need to introduce separate functions to assess each subset is created. Not all subgroups are the same.

# this makes output of summary(linearmodel) look ok, otherwise nonsense when written to csv, but still looks pretty nasty.
convertoutput <-function(x){ 
  res<-c(paste(as.character(summary(x)$call),collapse=" "),
         x$coefficients[1],
         x$coefficients[2],
         length(x$model),
         summary(x)$coefficients[2,2],
         summary(x)$r.squared,
         summary(x)$adj.r.squared,
         summary(x)$fstatistic,
         pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
  names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
                "F-statistic","numdf","dendf","p.value")
  return(res)} 

# Just to make a list of whats in those columns because I didnt know what the factor where, and I hoped I could
#use this to reference some FOR loops

keyFeedGroups = as.character(unique(Mydf$Type.of.feeding.interaction))
keyPredLifeStage = as.character(unique(Mydf$Predator.lifestage))

#Losing the will to live, I have just filtered to get the 5 feeding groups. Would rather have made
#FOR loops than hard coded for each type

insectivors = filter(Mydf, Type.of.feeding.interaction == "insectivorous")
pred_pisc = filter(Mydf, Type.of.feeding.interaction ==  "predacious/piscivorous")
piscivorous =  filter(Mydf, Type.of.feeding.interaction ==  "piscivorous")
planktivorous = filter(Mydf, Type.of.feeding.interaction ==  "planktivorous")
predacious = filter(Mydf, Type.of.feeding.interaction ==  "predacious")

#how many lifestages in each subset above and what are they
#Thought I might use this in Loops

get_LifeStages = function(dataframe){
  LifeStages = as.character(unique(dataframe$Predator.lifestage))
}
get_numberLifeStages = function(dataframe){
  No_Stages = sum(count(unique(dataframe$Predator.lifestage))$freq)
}
### how many predator life stages in each feed interaction
insectivorstages = get_LifeStages(insectivors)
pred_piscstages = get_LifeStages(pred_pisc)
piscivorousstages =  get_LifeStages(piscivorous)
planktivorousstages = get_LifeStages(planktivorous)
predaciousstages = get_LifeStages(predacious)
# need to loop for the number of stages times, over the stages to get the required models.

# This whole section should be one loop, FOR stages in keyFeedGroups. 
# The write.table/append gives very nasty output


n = length(piscivorousstages)
for (i in 1:n){
  #browser()
    model = lm(piscivorous$Predator.mass ~ piscivorous$Prey.mass, 
            subset = (piscivorous$Predator.lifestage == piscivorousstages[i]))
    title = c("predator life stage ", piscivorousstages[i], "piscivorous")
    output = convertoutput(model)
    fullout = rbind(title, output)
    write.table( fullout,  
                 file="../Results/PP_Regress.csv", 
                 append = T, 
                 sep=',', 
                 row.names=T, 
                 col.names=T )
  
}


n = length(insectivors)
for (i in 1:n){
  #browser()
  model = lm(insectivors$Predator.mass ~ insectivors$Prey.mass, 
             subset = (insectivors$Predator.lifestage == insectivorstages[i]))
  title = c("predator life stage ", insectivorstages[i], "insectivorous")
  output = convertoutput(model)
  fullout = rbind(title, output)
  write.table( fullout,  
               file="../Results/PP_Regress.csv", 
               append = T, 
               sep=',', 
               row.names=T, 
               col.names=T )
  
}


n = length(pred_piscstages)
for (i in 1:n){
  #browser()
  model = lm(pred_pisc$Predator.mass ~ pred_pisc$Prey.mass, 
             subset = (pred_pisc$Predator.lifestage == pred_piscstages[i]))
  title = c("predator life stage ", pred_piscstages[i], "pred_piscivorous")
  output = convertoutput(model)
  fullout = rbind(title, output)
  write.table( fullout,  
               file="../Results/PP_Regress.csv", 
               append = T, 
               sep=',', 
               row.names=T, 
               col.names=T )

}

n = length(predaciousstages)
for (i in 1:n){
  #browser()
  model = lm(predacious$Predator.mass ~ predacious$Prey.mass, 
             subset = (predacious$Predator.lifestage == predaciousstages[i]))
  title = c("predator life stage ", predaciousstages[i], "pred_piscivorous")
  output = convertoutput(model)
  fullout = rbind(title, output)
  write.table( fullout,  
               file="../Results/PP_Regress.csv", 
               append = T, 
               sep=',', 
               row.names=T, 
               col.names=T )
  
}



**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error:

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: ‘plyr’

The following objects are masked from ‘package:dplyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

Warning message:
In qt((1 - level)/2, df) : NaNs produced
Error in summary(x)$coefficients[2, 2] : subscript out of bounds
Calls: convertoutput
In addition: Warning messages:
1: In rbind(title, output) :
  number of columns of result is not a multiple of vector length (arg 1)
2: In write.table(fullout, file = "../Results/PP_Regress.csv", append = T,  :
  appending column names to file
3: In rbind(title, output) :
  number of columns of result is not a multiple of vector length (arg 1)
4: In write.table(fullout, file = "../Results/PP_Regress.csv", append = T,  :
  appending column names to file
5: In rbind(title, output) :
  number of columns of result is not a multiple of vector length (arg 1)
6: In write.table(fullout, file = "../Results/PP_Regress.csv", append = T,  :
  appending column names to file
Execution halted

======================================================================
Inspecting script file Vectorize2.py...

File contents are:
**********************************************************************
"""Vectoize1 in python extra credit example"""

__author__ = "Petra Guy, pg5117@ic.ac.uk"
__version__ = "2.7"

import sys
import numpy as np
import pandas as pd

#This script works with columns instead of rows. Other scripts in Sandbox
#Worked down rows, but I wanted to try this to see if faster
#Result can always be transposed.
#Improvements - variables for the Ricker equation are had coded.
#The stochastic element is random uniform, should be normal.
def get_column(row_count):
	"""Function t generate random numbers for the first row"""
	row = np.random.random((1, row_count))
	data = np.transpose(row)
	df = pd.DataFrame(data=data)
	return df

def get_norm(row_count):
	"""Function to generation the stochastic element"""
	data = np.random.random((1, row_count))
	return data

def stochrick(df, col_count, row_count):
	"""Caluclates the Ricker iteration across columns"""
	r = 1.2
	K = 1
	sigma = 0.2
	i = 1

	while i <= col_count:
		last_col = df.columns[-1]
		factor = get_norm(row_count)
		theta = r * (1 - df[last_col] / K)
		#import pdb; pdb.set_trace()		
		new_col = df[last_col] * np.exp(theta) + factor[0]
		new_col.name = i
		df = pd.concat([df, new_col], axis=1)
		i += 1
	return df


def main(argv):
	from timeit import default_timer as timer
	start = timer()
	df = get_column(row_count=100)
	Mout = stochrick(df, col_count=1000, row_count=100)
	print Mout
	end = timer()
	timetaken = end - start
	print "execution time is ", timetaken


if (__name__ == "__main__"):
	status = main(sys.argv)
	sys.exit(status)
**********************************************************************

Testing Vectorize2.py...

Vectorize2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
        0         1         2         3         4         5         6     \
0   0.468336  1.695741  1.143123  1.803250  0.898652  1.269097  1.456489   
1   0.480385  1.489053  1.795846  1.250963  1.700403  0.735772  1.950619   
2   0.285591  0.845427  1.441382  1.105476  1.667803  1.489963  0.880908   
3   0.816918  1.613409  1.714093  1.091523  1.913485  0.959442  1.299566   
4   0.136052  0.546989  1.681581  0.764817  1.083711  1.945877  1.413353   
5   0.955498  1.827361  0.725746  1.844655  1
**********************************************************************

Code ran without errors

Time consumed = 1.79758s

======================================================================
Inspecting script file apply1.R...

File contents are:
**********************************************************************

# Exercise 9.1.1, The apply family

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 20th October 2017


M = matrix(rnorm(100),10,10)

R1 = rowMeans(M)
R2 = apply(M,1,mean) # this two functions are the same, dont need apply for this
print(R2)

C1 = colMeans(M)
C2 = apply(M,2,mean)
print(C2)

**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 

**********************************************************************
 [1] -0.3150232  0.3825333 -0.1079735  0.1818073  0.0454264 -0.3829136
 [7]  0.1353750 -0.3754357  0.6313799  0.1447608
 [1]  0.47421794 -0.15267995 -0.23800880 -0.22740859  0.19544173  0.08924958
 [7] -0.28098040  0.22550274  0.18702130  0.06758093

**********************************************************************

Code ran without errors

Time consumed = 0.06963s

======================================================================
Inspecting script file CompileLatex.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 21th October 2017
# runs the commands to compile the latex document then opens the document. 
# Make sure you've created the bibliography
# Arguments:Requires FirstExample a tex file in Data directory
# FirstBiblio.bib in Data directory		
# #Date October 2017

# I put FirstExample in Data dir
#Remember you need the biblio graphy to be created

mv  Autocorrlatex2.tex ../Results
#mv ../Results/TAutocorrHist.pdf ../Code
#mv ../Results/TAutocorrtimeseries2.pdf ../Code
#mv ../Results/TAutocorrtimeseries1.pdf ../Code
#mv ../Results/TAutocorrmovingavg.pdf ../Code

cd ../Results
pdflatex Autocorrlatex2.tex # does something
pdflatex Autocorrlatex2.tex #compiles it
#pdflatex $1.tex # if this was bibtex, you'd need 2 more statements again
#pdflatex $1.tex
#pdflatex $1.tex

evince Autocorrlatex2.pdf &

#clean up - this deletes all the files created to make the documentd
#rm *~ # too scary
rm *.aux
#rm *.dvi
rm *.log
#rm *.nav
rm *.out
#rm *.snm
#rm *.toc
#added these last two on, because I could see these had been
# created hope they're no important? check this later coz StackExchange says
#you need some of the above, like .aux
#rm *.blg 
#rm *.bbl

**********************************************************************

Testing CompileLatex.sh...

Output (only first 500 characters): 

**********************************************************************
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./Autocorrlatex2.tex
LaTeX2e <2016/02/01>
Babel <3.9q> and hyphenation patterns for 81 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2014/09/29 v1.4h Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
(/usr/share/texlive/texmf-dist/tex/generic/babel/babel
**********************************************************************

Encountered error:
mv: cannot stat 'Autocorrlatex2.tex': No such file or directory

** (evince:23152): WARNING **: Error when getting information for file '/home/mhasoba/Documents/Teaching/IC_CMEE/2017-18/Coursework/StudentRepos/PetraGuy_PG5117/Week3/Results/Autocorrlatex2.pdf': No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

** (evince:23152): WARNING **: Error setting file metadata: No such file or directory

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:
**********************************************************************
#!bin/bash


python get_TreeHeight.py trees.csv

**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.47020s

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:
**********************************************************************
#!usr/bin/python

"""Chapter 7 Extra Credit"""

__author__ = "Petra Guy, pg5117@ic.ac.uk"
__version__ = "2.7"

import os
import sys
import pandas as pd
import numpy as np

MyData = []
#the os library allows file names and paths to be stuck together easily
#pandas allows the pd.read straight into the dataframe
def getdata(f):
	"""This function sticks the filename to the path for the data directory"""
	path = "../Data/"
	filepath = os.path.join(path,f)
	df = pd.read_csv(filepath)
	return df

#because this is now a dataframe, you can operate on the columns without the for loop
#the numpy is allowing the tan function.
def calc_height(df):
	"""This functions calculates height of the tree from distance and angle of elevation"""
	df['height'] = df['Distance.m'] * np.tan(np.deg2rad(df['Angle.degrees']))
	return df

def savedata(data,f):
	"""This function creates correct output file name"""
	addition = "get_TreeHeight_"
	outname = addition+f
	path = "../Results/"
	outfilepath = os.path.join(path,outname)
	data.to_csv(outfilepath)


def main(argv):
	MyData = getdata(argv[1])
	MyData = calc_height(MyData)
	savedata(MyData,argv[1])


if (__name__ == "__main__"):
		status = main(sys.argv)
		sys.exit(status)
**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "get_TreeHeight.py", line 46, in <module>
    status = main(sys.argv)
  File "get_TreeHeight.py", line 40, in main
    MyData = getdata(argv[1])
IndexError: list index out of range

======================================================================
Inspecting script file Control.R...

File contents are:
**********************************************************************
# Ex 7.15
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 22th October 2017

a = TRUE
if (a ==TRUE){
  print("a is TRUE")
} else {
  print(" a is FALSE")
}

z =  runif(1)
if (z <= 0.5){
  print("less than half")
}

for (i in 1:100){
  j = i*i
  print(paste(i,"squared is", j))
}

v = c("frog", "dog","mog", "hog")
 for (animals in v){
   print(paste("the animal is ", animal))
}

i = 0
while ( i < 100){
  i = i+1
  print(i^2)
}

**********************************************************************

Testing Control.R...

Output (only first 500 characters): 

**********************************************************************
[1] "a is TRUE"
[1] "1 squared is 1"
[1] "2 squared is 4"
[1] "3 squared is 9"
[1] "4 squared is 16"
[1] "5 squared is 25"
[1] "6 squared is 36"
[1] "7 squared is 49"
[1] "8 squared is 64"
[1] "9 squared is 81"
[1] "10 squared is 100"
[1] "11 squared is 121"
[1] "12 squared is 144"
[1] "13 squared is 169"
[1] "14 squared is 196"
[1] "15 squared is 225"
[1] "16 squared is 256"
[1] "17 squared is 289"
[1] "18 squared is 324"
[1] "19 squared is 361"
[1] "20 squared is 400"
[1] "21 squared is 441"
[1
**********************************************************************

Encountered error:
Error in paste("the animal is ", animal) : object 'animal' not found
Calls: print -> paste
Execution halted

======================================================================
Inspecting script file boilerplate.R...

File contents are:
**********************************************************************
##7.13 Writig R Functions

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 20th October 2017

MyFunction <- function(Arg1, Arg2) {
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1)))
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2)))
return(c(Arg1,Arg2))
  
}

MyFunction(1,2)
MyFunction("Bob","Geoff")**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Bob is a character"
[1] "Argument Geoff is a character"
[1] "Bob"   "Geoff"

**********************************************************************

Code ran without errors

Time consumed = 0.06786s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:
**********************************************************************
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 23th October 2017

#This function evaluates heights of trees from the angle of elevation and distance from the base
#height is distance x tan(angle)

#arguments: angle of elevation
#distance : distance to tree base
#Output: height of the tree, TreeHts.csv


MyData = read.csv("../Data/trees.csv")

TreeHeight = function(distance, angle) {
  radians =  angle*pi/180
  height = distance * tan(radians)
  print(height)
}


Tree.Heights.m = mapply(TreeHeight, MyData$Distance.m, MyData$Angle.degrees)
tmp = cbind(MyData,Tree.Heights.m)
write.csv(tmp, "../Results/TreeHts.csv")

**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************
[1] 27.80212
[1] 45.24603
[1] 14.66548
[1] 14.93418
[1] 35.97036
[1] 32.41021
[1] 17.45824
[1] 30.13738
[1] 20.31248
[1] 24.43166
[1] 27.50213
[1] 25.1559
[1] 29.39248
[1] 28.18639
[1] 30.73989
[1] 39.73756
[1] 24.69074
[1] 17.75982
[1] 20.81735
[1] 35.04535
[1] 31.85708
[1] 31.9386
[1] 13.48215
[1] 33.32665
[1] 30.2327
[1] 35.95132
[1] 21.94397
[1] 40.90508
[1] 20.74785
[1] 34.99243
[1] 25.92783
[1] 28.39448
[1] 33.66718
[1] 20.8697
[1] 22.86062
[1] 28.73253
[1] 17.74079
[1] 28.6979
[1] 34.99812
**********************************************************************

Code ran without errors

Time consumed = 0.07809s

======================================================================
Inspecting script file PP_Lattice.R...

File contents are:
**********************************************************************
#Chapter 9, 9.1.2
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 26th October 2017

rm(list = ls())

Mydf = read.csv("../Data/EcolArchives-E089-51-D1.csv")

library(lattice)
# plot graphs and output to pdfs
pdf("../Results/Prey_Lattice.pdf", # Open blank pdf page
    11.7, 8.3)
densityplot(~log(Prey.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()

pdf("../Results/Predator_Lattice.pdf", # Open blank pdf page
    11.7, 8.3)
densityplot(~log(Predator.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()
pdf("../Results/SizeRatio_Lattice.pdf", # Open blank pdf page
    11.7, 8.3)

densityplot(~log(Prey.mass/Predator.mass)| Type.of.feeding.interaction, data = Mydf)
dev.off()


# are all masses in same units?
masses_not_g =  subset(Mydf, Prey.mass.unit != "g")
length(unique(masses_not_g$Type.of.feeding.interaction)) # = 3, so there are three groups for mass of mg, that makes above calcs wrong.

#if prey mass unit = mg, x prey mass by 1E-3
l = length(Mydf$Prey.mass)
for (i in 1:l){
  if (Mydf$Prey.mass.unit[i] == "mg") {
    Mydf$Prey.mass[i] = Mydf$Prey.mass[i] * 1e-3
  }
}
#tapplys to get means and medians across feeding interaction
# ps, log = ln, natural log
groups = as.factor(Mydf$Type.of.feeding.interaction)

Prey.mass.means = tapply(log(Mydf$Prey.mass), groups, mean)

Predator.mass.means = tapply(log(Mydf$Predator.mass), groups, mean)

PredPrey.mass.means = tapply(log(Mydf$Predator.mass/Mydf$Prey.mass), groups, mean)

Prey.mass.median = tapply(log(Mydf$Prey.mass), groups, median)

Predator.mass.median = tapply(log(Mydf$Prey.mass), groups, median)

PredPrey.mass.median = tapply(log(Mydf$Predator.mass/Mydf$Prey.mass), groups, mean)
  
stats = rbind(Prey.mass.means, Predator.mass.means, PredPrey.mass.means, Prey.mass.median, Predator.mass.median, PredPrey.mass.median)

#write.csv(stats, "../Results/PP_Results.csv")
#another output with headers from StackO

write.table_with_header <- function(x, file, header, ...){
  cat(header, '\n',  file = file)
  write.table(x, file, append = T, ...)
}

#Note that append is ignored in a write.csv call, so you simply need to call
header = "All values are natural log"
write.table_with_header(stats,"../Results/PP_Results.csv",header,sep=',') 



**********************************************************************

Testing PP_Lattice.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 
null device 
          1 
null device 
          1 
[1] 3

**********************************************************************

Encountered error:
Warning message:
In write.table(x, file, append = T, ...) : appending column names to file

======================================================================
Inspecting script file next.R...

File contents are:
**********************************************************************
#9.2.2 Using Next
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 25th October 2017
for (i in 1:20) {
  if ((i %% 2) == 0)
    next
  print(i)
  
}
**********************************************************************

Testing next.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9
[1] 11
[1] 13
[1] 15
[1] 17
[1] 19

**********************************************************************

Code ran without errors

Time consumed = 0.06864s

======================================================================
Inspecting script file Sample.R...

File contents are:
**********************************************************************
# Exercise 9.3.1 Random numbers
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 26th October 2017

x = rnorm(50)


doit = function(x) {
  x = sample(x, replace = TRUE)
  if(length(unique(x)) > 30) {
     print(paste("Mean of this sample was:", as.character(mean(x))))
  }
}

#result = lapply(1:100, function(i) doit(x)) eh?

result = lapply(1:100, doit)

result = vector("list", 100)
for (i in 1:100) {
  result[[i]] <-doit(x)
}**********************************************************************

Testing Sample.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: 23.1063829787234"
[1] "Mean of this sample was: 24.9591836734694"
[1] "Mean of this sample was: 24.58"
[1] "Mean of this sample was: 25.6862745098039"
[1] "Mean of this sample was: 26.8076923076923"
[1] "Mean of this sample was: 26.2264150943396"
[1] "Mean of this sample was: 27.962962962963"
[1] "Mean of this sample was: 29.1272727272727"
[1] "Mean of this sample was: 30.1428571428571"
[1] "Mean of this sample was: 25.5614035087719"
[1] "Mean of this sample was: 29.
**********************************************************************

Code ran without errors

Time consumed = 0.07768s

======================================================================
Inspecting script file Vectorize1.R...

File contents are:
**********************************************************************
##Exercise 9.1
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 23th October 2017

M = matrix(runif(1000000), 1000,1000)

#AN example of using for loops to sum matrix elements
SumAllElements =  function(M) {
  Dimensions = dim(M)
  Tot = 0
  for (i in 1:Dimensions[1]){
    for (j in 1:Dimensions[2]){
      Tot = Tot + M[i,j]
    }
  }
  return(Tot)
}

print(system.time((SumAllElements(M))))
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 

**********************************************************************
   user  system elapsed 
  0.408   0.000   0.408 
   user  system elapsed 
  0.004   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.56008s

======================================================================
Inspecting script file break.R...

File contents are:
**********************************************************************
#9.2.1 Breaking out of loops

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 21th October 2017

i = 0
  while (i < Inf) {
    if (i==20) {
      break }
    else {
      cat ("i equals " , i , "\n")
      i  = i + 1
    }
  }**********************************************************************

Testing break.R...

Output (only first 500 characters): 

**********************************************************************
i equals  0 
i equals  1 
i equals  2 
i equals  3 
i equals  4 
i equals  5 
i equals  6 
i equals  7 
i equals  8 
i equals  9 
i equals  10 
i equals  11 
i equals  12 
i equals  13 
i equals  14 
i equals  15 
i equals  16 
i equals  17 
i equals  18 
i equals  19 

**********************************************************************

Code ran without errors

Time consumed = 0.06696s

======================================================================
Inspecting script file basic_io.R...

File contents are:
**********************************************************************
#7.12 Practising readin 
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 20th October 2017

# inputs trees.csv
# outputs MyData.csv, Mydatacsv.csv, Mydatatable.csv

MyData = read.csv("../Data/trees.csv")
MyDataHeader = read.csv("../Data/trees.csv", header = TRUE)
MyDataTable = read.table("../Data/trees.csv", sep = ",")
MydataSkip = read.csv("../Data/trees.csv", skip = 5)
write.csv(MyData,"../Results/Mydata.csv")
write.table(MyData[1,], file = "../Results/MyData.csv", append = TRUE)
write.csv(MyData, "../Results/MyDatacsv.csv", row.names = TRUE)
write.table(MyData, "../Results/MyDataTable.csv", col.names = FALSE)
**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Warning message:
In write.table(MyData[1, ], file = "../Results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file Vectorize1.py...

File contents are:
**********************************************************************
#!usr/bin/python


"""Vectoize1 in python extra credit example"""

__author__ = "Petra Guy, pg5117@ic.ac.uk"
__version__ = "2.7"

import sys
import numpy as np

# An example of suming matrix elements using for loop for rows and cols

def Sum_Matrix_Elements(M):
	Tot = 0
	for i in range(M.shape[0]):
		for j in range(M.shape[1]):
			Tot = Tot + M[i][j]
	return Tot


def main(argv):
	from timeit import default_timer as timer
	start = timer()
	M = np.random.random((3,3))
	Total = Sum_Matrix_Elements(M)
	print "Matrix element sum is ", Total
	end = timer()
	timetaken = end - start
	print "execution time is ", timetaken
	
	
if (__name__ == "__main__"):
	status = main(sys.argv)
	sys.exit(status)





**********************************************************************

Testing Vectorize1.py...

Vectorize1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Matrix element sum is  4.52502263639
execution time is  2.88486480713e-05

**********************************************************************

Code ran without errors

Time consumed = 0.04868s

======================================================================
Inspecting script file try.R...

File contents are:
**********************************************************************
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 23th October 2017

## run a simulation that involves sampling from a population with try
x <- rnorm(50) #Generate your population

doit <- function(x){
  x <- sample(x, replace = TRUE)
  if(length(unique(x)) > 30) {#only take mean if sample was sufficient
    print(paste("Mean of this sample was:", (mean(x))))
  }
  else {
    stop("Couldn't calculate mean: too few unique points!")
  }
}
## Try using "try" with vectorization:
result <- lapply(1:100,  function(i) try(doit(x), FALSE))
## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
  result[[i]] <- try(doit(x), FALSE)
}**********************************************************************

Testing try.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: 0.00127427449184692"
[1] "Mean of this sample was: -0.129695630340225"
[1] "Mean of this sample was: 0.0857530501946056"
[1] "Mean of this sample was: 0.285680086059692"
[1] "Mean of this sample was: -0.072343720370939"
[1] "Mean of this sample was: -0.0271896679569977"
[1] "Mean of this sample was: -0.0994980502932"
[1] "Mean of this sample was: 0.0989853693583396"
[1] "Mean of this sample was: 0.0660946599784266"
[1] "Mean of this sample was: -0.123429500861678"
[1
**********************************************************************

Encountered error:
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!

======================================================================
Inspecting script file apply2.R...

File contents are:
**********************************************************************
#Exercise 9.1.1 apply family
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 20th October 2017


SomeOperation = function(v) {
  if (sum(v) > 0)
    return (v*100)
}
return(v)

M = matrix(rnorm(100),10,10)
print(apply(M, 1, SomeOperation))

**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error: object 'v' not found
Execution halted

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:
**********************************************************************

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 23th October 2017

#InputFileName = "test.csv"
#output trees_gettree height, ish
args <- commandArgs(TRUE)
InputFileName <- as.character(args[1])

#paste the input filename onto the relative path
pathname = paste("../Data",InputFileName, sep = "/")
MyData = read.csv(pathname)

#This is the heights calcultion
TreeHeight = function(distance, angle) {
  radians =  angle*pi/180
  height = distance * tan(radians)
  print(height)
}


#strip ,csv off input file and create output fileneme
tmp = strsplit(InputFileName, "\\.")[[1]]
tmpout = paste(tmp[[1]],"treeheights", sep = "_")
tmpout2 = paste(tmpout,".csv")
outfile = paste("../Results",tmpout2, sep = "/")



Tree.Heights.m = mapply(TreeHeight, MyData[2], MyData[3])
tempdata = cbind(MyData,Tree.Heights.m)
write.csv(tempdata, outfile)**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../Data/NA': No such file or directory
Execution halted

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
#Chapter 8.8 Final Practical

#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 28th October 2017

rm(list = ls())
library(stats) # for plot.ts
library(ggplot2) 
library(pracma) # for movavg

# Collect the data
MyData = as.data.frame(read.csv("../Data/KeyWest.CSV"))


#load("../Data/KeyWestAnnualMeanTemperature.RData")
#Years = ats[[1]]  
Temps = MyData[[3]]
#MyData = as.data.frame(cbind(Years,Temps))
 

#Examine = function(Data){
  # plot simple time seriesgraphics.off()

pdf("../Results/TAutocorrtimeseries1.pdf")

ggplot(MyData, aes(x = Year, y = Temp))+
 labs(title = "Time series of temperature data for KeyWest 1900 - 2000", x = "date", y = "Temperature")+
  geom_line()
 
dev.off()

pdf("../Results/TAutocorrtimeseries2.pdf")
par(mfrow = c(2,2))
sapply(1:4, function(x) plot(MyData$Temp[-c(100:(100-x+1))], MyData$Temp[-c(1:x)], ylab = "Year", xlab = "year"))
dev.off()

#autocorrelation coef is Sum(Y[i+1]-AveY)(Y[i] -AveY)/sum(sqr(Y[i]-AveY))


# calculate sum[(Yi+1 - ave)(Yi - ave)] -- numerator of autocorr coef
#Calc_numerator = function(avector){
num = vector("numeric",99)
for (i in seq_along((Temps))) {
  if (i <100) {
  num[i] = as.vector( Temps[i+1] - mean(Temps) ) * ( Temps[i] - mean(Temps) )
  }
 else
 totalnum = sum(num)}



#Calc_denom = function(avector){
#  calcuate sum[(Yi - ave)^2] -- denom of auto corr coef
denom = vector("numeric",99)
for (i in seq_along((Temps))) {
  if (i <100) {
    denom[i] = as.vector(( Temps[i] - mean(Temps) )^2)
  }
  else
    totaldenom = sum(denom)}



#Calc_acf = function(avector){
   autocorrcoef = totalnum/totaldenom
   print("autocorrelatoin coefficient for lag 1 is ")
   print(autocorrcoef)


#generate 1000 acf from random sampling of Temps
  acfs = vector("numeric",1000)
  
  for (j in 1:1000){
    num = vector("numeric",99)
    denom = vector("numeric",99)
    
      for (i in seq_along((Temps))) {
        RTemp = sample(Temps,100)
      
        if (i <100) {
          num[i] = as.vector( RTemp[i+1] - mean(RTemp) ) * (RTemp[i] - mean(RTemp) )
          denom[i] = as.vector(( RTemp[i] - mean(RTemp) )^2)
      }
        else
          totalnum = sum(num)
          totaldenom = sum(denom)
        
      }
        acfs[j] = totalnum/totaldenom
  }
 

#Calculate p value
  p = length(acfs[acfs > autocorrcoef])/1000
  print("p value for autocorrelation coeffice=ient of lag 1 is ")
  print(p)
  message = "p value for autocorrelation coeffice=ient of lag 1 is "
  output = c(message,p)
  write(output,'../Results/pvalue.txt' )

 pdf("../Results/TAutocorrHist.pdf")
 hist(acfs, main = paste("distribution of random acfs. acf for sequential data 0.309"))
  #Since p value indicates correlation between points, lets look at moving average
  #and plot a trend line
dev.off()

  ma = movavg(MyData$Temp, 2, "s") # simple moving average with 2 points

  MyData = as.data.frame(cbind(MyData,ma)) # need a dataframe for ggplot

  lm = summary(lm(MyData$ma ~ MyData$Year, MyData)) #a linear model of moving averages
  
  pdf("../Results/TAutocorrmovingavg.pdf")
  ggplot(MyData, aes(y = MyData$ma, x = MyData$Year , colour  = abs(lm$residuals)))+
  geom_point()+
  labs(x = "Years", title = "Scatterplot of 2 point moving average and linear fit", y = "Moving Average")+
  geom_abline(intercept = lm$coefficients[1][1],
               slope = lm$coefficients[2][1],
                colour = "red")

  dev.off()
#####################





**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in library(pracma) : there is no package called ‘pracma’
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:
**********************************************************************
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 23th October 2017

# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .

rm(list=ls())

# This is the Ricker iteration in for loops
stochricknew<-function(p0=runif(1000,.5,1.5),numyears=100, r=1.2, K=1, sigma=0.2){
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) { 
          N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K))+rnorm(length(p0), 0, sigma)
    }
  return(N)
}
# Now write another code called stochrickvect that vectorizes the above 
# to the extent possible, with improved performance: 


MyMatrix =  stochricknew
# print("Vectorized Stochastic Ricker takes:")
print(system.time(stochricknew()))

# try this again with rapply - apply with iterations**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 

**********************************************************************
   user  system elapsed 
  0.028   0.000   0.029 

**********************************************************************

Code ran without errors

Time consumed = 0.10608s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:
**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 22th October 2017

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), 
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Start exploring the data (extend the script below)!  ###############
**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 

**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00703s

======================================================================
Inspecting script file DataWrang.R...

File contents are:
**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 24th October 2017

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), 
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Start exploring the data (extend the script below)!  ###############
**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 

**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.01148s

======================================================================
Inspecting script file PP_Regress.py...

File contents are:
**********************************************************************
#!usr/bin/python
#The data consists of predator and prey mass by type of feeding interaction
#and predator lifestage. We need to subset the data first by type of
#feeding interation, then by predator lifestage.
#linear models are required for ln(Predmass) ~ ln(Preymass) for predator
#lifestage, for type of feeding interation.

""" Rewriting pp regress in python because my R attempt was shoddy"""

___author___= "Petra Guy, pg5117@ic.ac.uk"
___version___="2.7"
import math
import pandas as pd
import numpy as np
from pprint import pprint as pp

# convert mg to grams
mydata = pd.read_csv("../Data/EcolArchives-E089-51-D1.csv")
mask = mydata['Prey.mass.unit'] == 'mg'
mydata.loc[mydata['Prey.mass.unit'] == 'mg', 'Prey.mass'] = mydata['Prey.mass']*1e-3

#take logs of prey mass and pred mass
mydata['logPreyMass'] =  np.log(mydata['Prey.mass'])
mydata['logPredMass'] = np.log(mydata['Predator.mass'])

#Create an array of the type of feeding interactions
Feeding = mydata[u'Type.of.feeding.interaction'].unique()
#Create an array of the predator lifestages
LifeStages = mydata[u'Predator.lifestage'].unique()

#Subset the database by each feeding interaction
FeedingDict = {elem : pd.DataFrame for elem in Feeding}

for key in FeedingDict.keys():
    FeedingDict[key] = mydata[:][mydata[u'Type.of.feeding.interaction'] == key]

#Now to access a subset FeedingDict['insectivorous'] for example

#Now I can take each element in Feeding Dict, subset in the same way
#by lifestage, do linear model, export data.

for key,value in FeedingDict.items():
	mean = FeedingDict[key]['logPredMass'].mean()
	print key, mean

**********************************************************************

Testing PP_Regress.py...

PP_Regress.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
planktivorous -2.84441552918
insectivorous -0.197685318869
predacious 4.77986971957
predacious/piscivorous 6.06403752213
piscivorous 7.71223438648

**********************************************************************

Code ran without errors

Time consumed = 0.62650s

======================================================================
Inspecting script file GPDD.R...

File contents are:
**********************************************************************

#Chapt 9 extra Credit Mapping
#Biological Computing Boot Camp
#R Studio Version 1.1.383 ubuntu 16.04 LTS 64bi
#Author Petra Guy 23th October 2017

rm(list = ls())
MyData = read.csv("../Data/GPDD.csv")
library(ggplot2)
#library(maps)
library(ggmap)
#library(reshape2)


# getting the map
GPDDMap <- get_map(location = c(lon = mean(MyData$long), lat = mean(MyData$lat)), zoom = 3,
                      maptype = "satellite", scale = 1)

# plotting the map with some points on it
pdf("../Results/GDPPMap.pdf")
ggmap(GPDDMap) +
  geom_point(data = MyData, aes(x = long, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
  guides(fill=FALSE, alpha=FALSE, size=FALSE)
dev.off()
# appear to only be northern hemisphere data. **********************************************************************

Testing GPDD.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in library(ggmap) : there is no package called ‘ggmap’
Execution halted

======================================================================
======================================================================
Finished running scripts

Ran into 11 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Marks for the Week = 98.5

NOTE THAT THESE ARE NOT THE FINAL MARKS FOR THE WEEK, BUT AN UPPER BOUND ON THE MARKS!