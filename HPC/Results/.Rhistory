t = 200
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (i in 1:20) {
x = neutral_generation_speciation(x,v)
rich[i] = species_richness(x)
}
abundance = species_abundance(rich)
octets[i] = octaves(abundance)
}
return(octets)
}
rich = species_richness(x)
rich
for (i in 1:20) {
x = neutral_generation_speciation(x,v)
rich[i] = species_richness(x)
}
rich
t = 200
for ( i in 1:t){
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (i in 1:20) {
x = neutral_generation_speciation(x,v)
rich[i] = species_richness(x)
}
abundance = species_abundance(rich)
octets[i] = octaves(abundance)
}
octets = list()
for ( i in 1:t){
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (i in 1:20) {
x = neutral_generation_speciation(x,v)
rich[i] = species_richness(x)
}
abundance = species_abundance(rich)
octets[i] = octaves(abundance)
}
octets
abundance = species_abundance(rich)
abundance
octet = octaves(abundance)
octet
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 200
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
rich[j] = species_richness(x)
}
abundance = species_abundance(rich)
octets[i] = octaves(abundance)
}
return(octets)
}
octet = octaves(abundance)
octet
octs = question_16()
octs
View(octs)
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 200
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
browser()
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
rich[j] = species_richness(x)
}
abundance = species_abundance(rich)
octets[i] = octaves(abundance)
}
return(octets)
}
octs = question_16()
nn
rich
rich
rich
abundance
octet
octets
abundance
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 200
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
browser()
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
rich[j] = species_richness(x)
}
abundance = species_abundance(rich)
octets[[i]] = octaves(abundance)
}
return(octets)
}
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
octets
octets
octets
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 200
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
browser()
rich = vector()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
rich[j] = species_richness(x)
}
abundance = species_abundance(rich)
octets[[i]] = octaves(abundance)
}
return(octets)
}
View(octets)
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 10
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
return(octets)
}
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 10
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
return(octets)
}
question_16 = function(){
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 10
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
return(octets)
}
question_16()
octs = question_16()
octs
octsnew = unlist(octs)
octsnew
hist(octsnew)
octs = question_16()
octsnew = unlist(octs)
hist(octsnew)
?hist
breaks =c(1,3,7,15,31)
hist(octsnew, breaks = breaks)
breaks =c(0,1,3,7,15,31)
hist(octsnew, breaks = breaks)
breaks =c(0,1,3,7,15,31,63)
hist(octsnew, breaks = breaks)
breaks =c(0,1,3,7,15,31)
hist(octsnew, breaks = breaks)
f = freq(octsnew)
f = frequency(octsnew)
f
octsnew
sort(octsnew)
octs
length(octs)
octs[1]
octs[1][1]
octs[[1]]
octs[[1]][[1]]
z = octs[[1]]+octs[[2]]
z
z = octs[[10]] +octs[[9]]
a = octe[[1]]
a = octets[[1]]
b = octets[[2]]
tmp = sum_vect(a,b)
sum_vect = function(x,y) {
while (length(x)!= length(y)) {
if (length(x) < length(y))    {
short = x
long =y }
else{
short = y
long = x
}
newshort <- c(x, rep(0, length(long)-length(short)))
sum = newshort + long
return(sum)
}
print("vectors are the same length")
sum = (x + y)
return(sum)
}
tmp = sum_vect(a,b)
tmp
sum_vect = function(x,y) {
if (length(x) < length(y))    {
short = x
long =y
newshort = c(x, rep(0, length(long)-length(short)))
sum = newshort + long
}   else if (length(x) > length(y)) {
short = y
long = x
newshort = c(x, rep(0, length(long)-length(short)))
sum = newshort + long
}   else  {
sum = x + y
}
return(sum)
}
tmp = sum_vect(a,b)
tmp
a
a = octets[[1]]
a
octets
octets = question_16()
octets
a = octets[[2]]
b = octets[[3]]
c = octets[[6]]
d = sum_vect(a,b)
e = sum_vect(b,a)
b
a
sum_vect = function(x,y) {
if (length(x) < length(y))    {
short = x
long =y
newshort = c(x, rep(0, length(long)-length(short)))
sum = newshort + long
}   else if (length(x) > length(y)) {
short = y
long = x
newshort = c(y, rep(0, length(long)-length(short)))
sum = newshort + long
}   else  {
sum = x + y
}
return(sum)
}
e = sum_vect(b,a)
e
f = sum_vect(b,c)
f
tmp = sum_vect(a,b)
sum = vector()
sum = sum + tmp
sum
tmp
sum = sum_vect(sum,tmp)
sum
sum/2
question_16 = function(){
octets = list()
sum = vector()
x = initialise_min(100)
v = 0.1
i = 1
t = 100
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
#find the average of the octaves which are list elements of octets
sum = vector()
for (i in 1:t-1)
oct_1 = octets[[i]]
oct_2 = octets[[i+1]]
tmp = sum_vect(oct_1, oct_2)
sum =  sum_vect(sum,tmp)
ave = sum/t
return(octets)
}
f = question_16()
question_16 = function(){
octets = list()
sum = vector()
x = initialise_min(100)
v = 0.1
i = 1
t = 100
# burn in
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
# start of modelling
for ( i in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (j in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
#find the average of the octaves which are list elements of octets
sum = vector()
for (i in 1:t-1){
oct_1 = octets[[i]]
oct_2 = octets[[i+1]]
tmp = sum_vect(oct_1, oct_2)
sum =  sum_vect(sum,tmp)
}
ave = sum/t
return(ave)
}
f = question_16()
View(neutral_time_series_speciation)
octets = list()
x = initialise_min(100)
v = 0.1
i = 1
t = 100
while (i < 20){
x = neutral_generation_speciation(x,v)
i = i + 1
}
x
for (k in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[i]] = octaves(abundance)
}
for (k in 1:20) {
x = neutral_generation_speciation(x,v)
}
x
abundance = species_abundance(x)
for ( j in 1:t){
#browser()
#catch richness 20 cycles, rih has 20 elements
for (k in 1:20) {
x = neutral_generation_speciation(x,v)
}
abundance = species_abundance(x)
octets[[j]] = octaves(abundance)
}
octets
sum = vector()
for (l in 1:(t-1)){
oct_1 = octets[[l]]
oct_2 = octets[[l+1]]
tmp = sum_vect(oct_1, oct_2)
sum =  sum_vect(sum,tmp)
}
ave = sum/t
ave
hist(ave)
barplot(ave)
?barplot
names = c("1-3","4-7","8-32","33-63")
barplot(ave,names.arg = names)
names = c("1-3","4-7","8-32")
barplot(ave,names.arg = names)
names = c("1-3","4-7","8-31","32-63","64-127")
barplot(ave,names.arg = names)
barplot(ave)
dev.off()
barplot(ave)
?barplot
ave
names
names = c("1-3","4-7","8-31","32-63","64-127",">127")
barplot(ave,names.arg = names)
?barplot
barplot(ave,names.arg = names, main = "Frequency of abundances in octets")
barplot(ave,names.arg = names, main = "Frequency of abundances in octets", xlab = "octets")
barplot(ave,names.arg = names, main = "Frequency of abundances in octets", xlab = "abundances")
comm = generate_community(10)
comm
ab = species_abundance(comm)
ab
o =  octaves(ab)
o
?Sys.time
setwd("~/Documents/CMEECourseWork/HPC/Results")
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_100.rda")
View(octets)
View(octets)
nonnullocts = octets[!unlist(lapply(octets, is.null))]
View(nonnullocts)
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_78.rda")
nonnullocts = octets[!unlist(lapply(octets, is.null))]
View(nonnullocts)
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_6.rda")
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_6.rda")
nonnullocts = octets[!unlist(lapply(octets, is.null))]
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_30.rda")
nonnullocts = octets[!unlist(lapply(octets, is.null))]
View(nonnullocts)
View(nonnullocts)
View(nonnullocts)
View(nonnullocts)
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_60.rda")
nonnullocts = octets[!unlist(lapply(octets, is.null))]
load("/home/petra/Documents/CMEECourseWork/HPC/Results/pg5117_cluster_89.rda")
nonnullocts = octets[!unlist(lapply(octets, is.null))]
