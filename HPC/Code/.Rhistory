plot(NA, xlim=c(1,9), ylim=c(0,15), xlab="X", ylab="Y")
fern_2 = function(start,distance,direction,dir){
coords = turtle(start, distance, direction)
direction1 = direction - (pi/4)*dir
dir = dir*-1
if (distance > 0.1){
fern_2(coords,0.38*distance,direction1,dir)
fern_2(coords,0.87*distance,direction,dir)
}
}
start = c(5,0)
fern_2(start,2,pi/2,-1)
plot(NA, xlim=c(1,9), ylim=c(0,7), xlab="X", ylab="Y")
fern_mod = function(start,distance,direction){
coords = turtle(start, distance, direction)
direction1 = (direction + pi/8)
direction2 = 0.9*direction
if (distance > 0.1){
fern_mod(coords,0.87*distance,direction1)
fern_mod(coords,0.5*distance,direction2)
}
}
start = c(8,0)
fern_mod(start,2,pi/2)
factor = 0.38
plot(NA, xlim=c(0,40), ylim=c(0,40), xlab="X", ylab="Y")
fern_2_mod = function(start,distance,direction,dir){
#browser()
coords = turtle(start, distance, direction)
factor = factor*1.2
direction1 = direction - (pi/4)*dir
dir = dir*-1
if (distance > 0.05){
fern_2_mod(coords,factor*distance,direction1,dir)
fern_2_mod(coords,0.87*distance,direction,dir)
}
}
start = c(20,0)
fern_2_mod(start,5,pi/2,-1)
factor = 0.38
plot(NA, xlim=c(0,40), ylim=c(0,40), xlab="X", ylab="Y")
fern_2_mod = function(start,distance,direction,dir){
#browser()
coords = turtle(start, distance, direction)
factor = factor*1.2
direction1 = direction - (pi/4)*dir
dir = dir*-1
if (distance > 0.05){
fern_2_mod(coords,factor*distance,direction1,dir)
fern_2_mod(coords,0.87*distance,direction,dir)
}
}
start = c(20,0)
fern_2_mod(start,5,pi/2,-1)
turtle1 = function(start, distance, direction){
x1 = start[1]
y1 = start[2]
x2 = x1 + distance*cos(direction)
y2 = y1 + distance*sin(direction)
if (distance > 0.5){
col = "brown"
lwd = 3
}else {
col = "green"
lwd = 0.5
}
segments(x1,y1,x2,y2,col = col,lwd =lwd)
coords = c(x2,y2)
return(coords)
}
tree_mod = function(start,distance,direction){
coords = turtle1(start, distance, direction)
direction1 = (direction - pi/5)
direction2 = (direction + pi/5)
distance = 0.75*distance
if (distance > 0.05){
tree_mod(coords,distance,direction1)
tree_mod(coords,distance,direction2)
}
}
start = c(10,0)
tree_mod(start,3,pi/2)
plot(NA, xlim=c(0,20), ylim=c(0,12), xlab="X", ylab="Y")
turtle1 = function(start, distance, direction){
x1 = start[1]
y1 = start[2]
x2 = x1 + distance*cos(direction)
y2 = y1 + distance*sin(direction)
if (distance > 0.5){
col = "brown"
lwd = 3
}else {
col = "green"
lwd = 0.5
}
segments(x1,y1,x2,y2,col = col,lwd =lwd)
coords = c(x2,y2)
return(coords)
}
tree_mod = function(start,distance,direction){
coords = turtle1(start, distance, direction)
direction1 = (direction - pi/5)
direction2 = (direction + pi/5)
distance = 0.75*distance
if (distance > 0.05){
tree_mod(coords,distance,direction1)
tree_mod(coords,distance,direction2)
}
}
start = c(10,0)
tree_mod(start,3,pi/2)
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
plot(NA, xlim=c(1,2), ylim=c(0,10), xlab="X", ylab="Y")
fern(c(1,0),1,1)
fern = function(start, distance, direction) {
coords = turtle(start, distance, direction)
distance1 = distance
distance2 = distance
#coords = turtle(start, distance, direction)
if (distance > 0.01){
distance = 0.9*distance
fern(coords, distance = 0.38*distance1, direction = 3*pi/4 )
fern(coords, distance= 0.87*distance2, direction = (pi/2) )
}
}
plot(NA, xlim=c(1,1.6), ylim=c(0,10), xlab="X", ylab="Y")
fern(c(1,0),1,1)
challenge_B = function(){
v = 0.1
t = 200
size = 100
repeats = 50
num_communties = 10
communities = data.frame(row.names = FALSE)
#generate some communites with random initial richnesses and store them
#in a datframe called communties. Because expected richness for 100 selected
#from 100 is 63.66, richness will always be around 64. To get a variety of richnesses
# the number out of wich to select is altered
for (i in 1:num_communties){
set.seed(i)
m = size/i
community = generate_community(m,size)
communities = cbind(communities, community)
}
#create a list of dataframes of richnesses for each community in communities
#when is is processes through neutral_time_series_speciation repeat times
richness_list = list()
get_repeated_richnesses = function(a_comm,v,t){
richness_df = data.frame()
for (i in 1:repeats){
richness = neutral_time_series_speciation(a_comm, v, t)
richness_df = rbind(richness_df,richness, row.names = NULL)
}
return(richness_df)
}
for (i in 1:num_communties){
richness_list[[i]] = get_repeated_richnesses(communities[,i],v,t)
}
# we now have richness_list. Each element is a num repeats x t dataframe for each
#initial community. Each row of the datafram is the richness value through time.
# There as many rows as we specified repeats to average over. As for challenge A
#we now take the  average for each column to give an average richness
#over the time steps. No CI required this time
ave_df =  data.frame(row.names = FALSE)
for (i in 1:num_communties){
ave = colSums(richness_list[[i]])/repeats
ave_df = cbind(ave_df,ave,row.names = NULL)
}
x = (1:t)
matplot (x, ave_df, pch = 19, cex = 0.3,
xlab = "generations", ylab = "average richness",
main = "Average species richness for various starting communities",
sub = "v = 0.1, community size = 100")
}
################# QUESTION 17 AND 18 ####################################
# THE FULL PROGRAMME AS IT WAS LOADED ONTO THE HPC SAVED SEPARATWLY
################ QUESTION 19 #######################################
#BASH SCRIPT,
#R CODE
#OUTPUT FILES
# ALL IN ZIP
# SEE /RESULTS/Cluster_1207 for zip and /RESULTS/Cluster_1207/pg5117 for files
############# Question 20 ##########################################
# Read in the files from the HPC
#couldnt work out easy wy of specifying files in each batch, so this first function
get_quartile = function(i) {
if (i == 1) {
quartile = c(1:25)
}
else if (i == 2) {
quartile = c(26:50)
}
else if (i == 3) {
quartile = c(51:75)
}
else {
quartile = c(76:100)
}
return(quartile)
}
# This function returns the sum and number of the octets in single file, to be found in path specified
get_sum_and_length_of_octet = function(i) {
#browser()
infile = paste("../Results/Unzipped/pg5117_cluster_", i, ".rda", sep = "")
load(infile)
len = length(octets)
sum = vector()
sum_and_length = list()
for (a in 1:len) {
sum = sum_vect(sum, octets[[a]])
}
sum_and_length[[1]] = sum
sum_and_length[[2]] = len
return(sum_and_length)
}
get_results = function() {
#browser()
ave_for_file_batch = list()
for (i in 1:4) {
j = get_quartile(i)    # this return vector of file numbers in each batch, eg if i = 2, 26:50
cum_sum = vector()
cum_len = 0
results = list()
for (counts in j) {
results =  get_sum_and_length_of_octet(counts)
cum_sum = sum_vect(cum_sum, results[[1]])
cum_len =  results[[2]] + cum_len
}
ave_for_file_batch[[i]] = cum_sum / cum_len
}
return(ave_for_file_batch)
}
plot_results = function(results) {
par(mfrow = c(2, 2))
ave1 = results[[1]]
plot1 = barplot(ave1,
main = paste(round(results[[1]], 3), collapse = ","),
xlab = "abundances, size = 500")
ave2 = results[[2]]
plot2 = barplot(ave2,
main = paste(round(results[[2]], 3), collapse = ","),
xlab = "abundances, size = 1000")
ave3 = results[[3]]
plot3 = barplot(ave3,
main = paste(round(results[[3]], 3), collapse = ","),
xlab = "abundances, size = 2500")
ave4 = results[[4]]
barplot(ave4,
main = paste(round(results[[4]], 3), collapse = ","),
xlab = "abundances, size = 5000")
}
challenge_B()
source('~/Documents/CMEECourseWork/HPC/Code/challenge_B.R', echo=TRUE)
source('~/Documents/CMEECourseWork/HPC/Code/challenge_B.R', echo=TRUE)
source('~/Documents/CMEECourseWork/HPC/Code/challenge_B.R', echo=TRUE)
challenge_B()
source('~/Documents/CMEECourseWork/HPC/Code/challenge_B.R', echo=TRUE)
source('~/Documents/CMEECourseWork/HPC/Code/challenge_B.R', echo=TRUE)
challenge_B()
communities = data.frame()
communities = data.frame()
community = generate_community(m,size)
size = 100
m = size/i
community = generate_community(m,size)
communities = cbind(communities, community,row.names = NULL)
generate_community(100,100)
length(generate_community(100,100))
length(generate_community(50,100))
?sample
sample(x = c(1:100), size = 100)
sample(x = c(1:50), size = 100)
sample(x = c(1:50), size = 100, replace = TRUE)
generate_community(50,100)
comm = sample(c(1:50),100)
comm = sample(c(1:50),100, repalce = TRUE)
comm = sample(c(1:50),100, repLace = TRUE)
comm = sample(c(1:50),100, replace = TRUE)
generate_community = function(m,size) {
comm = sample(c(1:m),
size = size,
replace = TRUE)
return(comm)
}
generate_community(50,100)
source('~/Documents/CMEECourseWork/HPC/Code/challenge_B.R', echo=TRUE)
rm(list = ls())
graphics.off()
#generate random communities
generate_community = function(m,size) {
comm = sample(c(1:m),
size = size,
replace = TRUE)
return(comm)
}
#Q1 get species richness
species_richness = function(x) {
r = length(unique(x))
return(r)
}
#Q2 Get a maximally diverse community
initialise_max = function(x) {
comm = seq(1:x)
return(comm)
}
#Q3 get a minimally diverse community - everything is the same
initialise_min = function(x) {
comm = rep(1, x)
return(comm)
}
#Q4 Need for neutral_step functions, just select two numbers from within the length of
#input vector which can then be used as indices for speciation or death replacement
choose_two = function(x) {
two = sample(x, 2)
return(two)
}
#Q5 Uses choose two and then replaces species at index 1 with that at index 2
#Simulates a species dieing and being repalced by another within community
neutral_step = function(x) {
index = choose_two(length(x))
x[index[1]] = x[index[2]]
return(x)
}
#Q6 Su=imulates n steps of neutral step
neutral_generation = function(x) {
n = round(length(x) / 2)
for (i in 1:n) {
comm = neutral_step(x)
}
return(comm)
}
#Q7 Runs several generations and returns species richness a each step
neutral_time_series = function(x, t) {
rich = (species_richness(x))
for (i in 1:t) {
x = neutral_generation(x)
rich = c(rich, species_richness(x))
}
return(rich)
}
#Q8 Uses neutral time series over 200 steps on a maximally diverse community and plots the richness
question_8 = function() {
rich = neutral_time_series(initialise_max(100), 2000)
plot(rich, main = "Species richness without new species",
ylab = "species richness",
xlab = "time steps")
}
challenge_B = function(){
v = 0.1
t = 200
size = 100
repeats = 50
num_communties = 10
communities = data.frame(row.names = FALSE)
#generate some communites with random initial richnesses and store them
#in a datframe called communties. Because expected richness for 100 selected
#from 100 is 63.66, richness will always be around 64. To get a variety of richnesses
# the number out of wich to select is altered
for (i in 1:num_communties){
set.seed(i)
m = size/i
community = generate_community(m,size)
communities = cbind(communities, community,row.names = NULL)
}
#create a list of dataframes of richnesses for each community in communities
#when is is processes through neutral_time_series_speciation repeat times
richness_list = list()
get_repeated_richnesses = function(a_comm,v,t){
richness_df = data.frame()
for (i in 1:repeats){
richness = neutral_time_series_speciation(a_comm, v, t)
richness_df = rbind(richness_df,richness,row.names = NULL)
}
return(richness_df)
}
for (i in 1:num_communties){
richness_list[[i]] = get_repeated_richnesses(communities[,i],v,t)
}
# we now have richness_list. Each element is a num repeats x t dataframe for each
#initial community. Each row of the datafram is the richness value through time.
# There as many rows as we specified repeats to average over. As for challenge A
#we now take the  average for each column to give an average richness
#over the time steps. No CI required this time
ave_df =  data.frame(row.names = FALSE)
for (i in 1:num_communties){
ave = colSums(richness_list[[i]])/repeats
ave_df = cbind(ave_df,ave, row.names = NULL)
}
x = (1:t)
matplot (x, ave_df, pch = 19, cex = 0.3,
xlab = "generations", ylab = "average richness",
main = "Average species richness for various starting communities",
sub = "v = 0.1, community size = 100")
}
challenge_B()
#Q9 creates a neutral step with either a speciation or a replacement, depending on value of v
neutral_step_speciation = function(x, v) {
p = runif(1)
if (v < p) {
index = choose_two(length(x))
x[index[1]] = x[index[2]]
}
else {
newspecies =  max(x) + 1
index = sample((length(x)), size = 1, replace = TRUE)
x[index] = newspecies
}
return(x)
}
#Q10 Takes a community and outputs new community after a few generations with speciation or replacement
neutral_generation_speciation = function(x, v) {
n =  round(length(x) / 2)
for (i in 1:n) {
x = neutral_step_speciation(x, v)
}
return(x)
}
#Q11 Returns community richness at each generation
neutral_time_series_speciation = function(x, v, t) {
rich = vector()
for (i in 1:t) {
x = neutral_generation_speciation(x, v)
rich[i] = species_richness(x)
}
return(rich)
}
#Q13 calcualte species abundance using table - which gives frequencies
species_abundance = function(x) {
abundance = as.numeric(sort(table(x), decreasing = TRUE))
return(abundance)
}
#Q14 Arrange the abundances into octets
octaves = function(x) {
oct = tabulate(floor(log2(x)) + 1)
return(oct)
}
#Q15 Need to add the octets produced by octaves() and average them, but each octet can be a different
#length, this function pads the shorter octet with zeros
sum_vect = function(x, y) {
if (length(x) < length(y))    {
short = x
long = y
newshort = c(x, rep(0, length(long) - length(short)))
sum = newshort + long
}   else if (length(x) > length(y)) {
short = y
long = x
newshort = c(y, rep(0, length(long) - length(short)))
sum = newshort + long
}   else  {
sum = x + y
}
return(sum)
}
challenge_B = function(){
v = 0.1
t = 200
size = 100
repeats = 50
num_communties = 10
communities = data.frame(row.names = FALSE)
#generate some communites with random initial richnesses and store them
#in a datframe called communties. Because expected richness for 100 selected
#from 100 is 63.66, richness will always be around 64. To get a variety of richnesses
# the number out of wich to select is altered
for (i in 1:num_communties){
set.seed(i)
m = size/i
community = generate_community(m,size)
communities = cbind(communities, community,row.names = NULL)
}
#create a list of dataframes of richnesses for each community in communities
#when is is processes through neutral_time_series_speciation repeat times
richness_list = list()
get_repeated_richnesses = function(a_comm,v,t){
richness_df = data.frame()
for (i in 1:repeats){
richness = neutral_time_series_speciation(a_comm, v, t)
richness_df = rbind(richness_df,richness,row.names = NULL)
}
return(richness_df)
}
for (i in 1:num_communties){
richness_list[[i]] = get_repeated_richnesses(communities[,i],v,t)
}
# we now have richness_list. Each element is a num repeats x t dataframe for each
#initial community. Each row of the datafram is the richness value through time.
# There as many rows as we specified repeats to average over. As for challenge A
#we now take the  average for each column to give an average richness
#over the time steps. No CI required this time
ave_df =  data.frame(row.names = FALSE)
for (i in 1:num_communties){
ave = colSums(richness_list[[i]])/repeats
ave_df = cbind(ave_df,ave, row.names = NULL)
}
x = (1:t)
matplot (x, ave_df, pch = 19, cex = 0.3,
xlab = "generations", ylab = "average richness",
main = "Average species richness for various starting communities",
sub = "v = 0.1, community size = 100")
}
challenge_B()
